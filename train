import timm
import torch
from torch import nn
import torchvision.transforms as transforms
# from torch.utils.data import DataLoader
from timm import create_model
import os
os.environ['KMP_DUPLICATE_LIB_OK']='True'
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
# import torchvision.datasets
# import  torch.utils.data
import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] ='0'



from functools import partial

import torch
import torch.nn as nn

# 定义数据增强转换器
data_transforms = {
    'train': transforms.Compose([
        transforms.RandomResizedCrop(size=224, scale=(0.08, 1.0)),
        transforms.RandomHorizontalFlip(),
        transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ]),
    'val': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ]),
}



# 读取数据
trainset = ImageFolder(root='C:\\dataset\\train',transform=data_transforms['train'])
train_dataloader = DataLoader(trainset, batch_size=100, shuffle=True, num_workers=0)

print("trainset长度:",len(trainset),"traindataloader长度:",len(train_dataloader))

# Check if CUDA is available and set the device accordingly
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Training on", device)


# 加载预训练的模型
#model = create_inception_v4(load_weights=0)
# model = create_model('inception_next_small', pretrained=True,num_classes=7)
model = create_model('mobilenetv3_large_100', pretrained=True,num_classes=7).to(device)
# dropout_layer = model._modules['features']['dropout']
# dropout_layer.p = 0.2
# print(model)

# 定义误差验证
# 加入权重,对于不同类别，重要性不同
# class_weights = torch.tensor([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])  # 根据类别的重要性设置权
d=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
class_weights = torch.tensor(d)  # 根据类别的重要性设置权
criterion = nn.CrossEntropyLoss(weight=class_weights).to(device)

# 准确率计算
total_train_loss = 0.0
total_correct = 0
def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(labels))

# # 定义优化器
# import torch.optim as optim
# optimizer = optim.Adam(model.parameters(), lr=1e-3)
#  # 定义优化器lion
from lion_pytorch import Lion
optimizer = Lion(model.parameters(), weight_decay=1e-2,lr=1e-4)

# 初始化训练参数
running_loss = 0.0
num_epochs = 30# 假设我们打算训练 n个epoch
log_interval = 1  # 每隔一定步数打印训练状态

#----------------------------------------------------------------
# 开始训练
for epoch in range(num_epochs):
    model.train()  # 将模型设置为训练模式
    total_correct = 0
    total_examples = 0
    total_loss = 0

    all_predictions = []
    all_labels = []

    # 遍历数据加载器并进行前向传递
    for batch_idx, (images, labels) in enumerate(train_dataloader):
        images, labels = images.to(device), labels.to(device)
        # print("images: {:.2f}".format(images.size(0)))
        # print("labels: {:.2f}".format(labels.size(0)))
        # print(labels)
        optimizer.zero_grad()  # 梯度清零
        # 前向传递
        outputs = model(images)
        loss = criterion(outputs,labels).to(device)
        # 反向传播和参数优化
        loss.backward()# 反向传播
        optimizer.step()# 更新模型参数

        _, predicted = torch.max(outputs, dim=1)
        total_correct += (predicted == labels).sum().item()
        total_examples += images.size(0)
        total_loss += loss.item() * images.size(0)



        # 显示整数项批次的信息
        if batch_idx % log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\t Loss: {:.6f}'.format(
                epoch, batch_idx * len(images), len(train_dataloader.dataset),
                100. * batch_idx / len(train_dataloader), loss.item()))

        all_predictions.extend(predicted.tolist())
        all_labels.extend(labels.tolist())

    acc = total_correct / total_examples
    mean_loss = total_loss / total_examples
    print(f"Training Set Accuracy: {acc:.4f}, Mean Loss: {mean_loss:.4f}")


    # 权重计算
    from collections import defaultdict
    category_stats = defaultdict(lambda: {'correct': 0, 'wrong': {k: 0 for k in range(0, 7)}})  # 范围从0到6，代表7个类别
    for true_label, pred_label in zip(all_labels, all_predictions):
        if true_label == pred_label:
            category_stats[true_label]['correct'] += 1
        else:
            category_stats[true_label]['wrong'][pred_label] += 1

    for category, stats in category_stats.items():
        correct = stats['correct']
        wrong = stats['wrong']
        print(f"Category {category}: Correct - {correct}, Wrong - {wrong}")
        d[category] = (1 - correct / 7001) ** 2
        print(d[category])
        # 如果需要详细列出错误预测到了哪些类别及其数量
        for err_cat, count in wrong.items():
            if count > 0:
                print(f"   Incorrectly predicted as category {err_cat}: {count} times")
                d[category] = d[category] + (count / 7001) ** 2

                print(d[category])

    import numpy as np
    print(d)
    d = np.exp(d)
    print(d)
    sum = np.sum(d)
    print(sum)
    d = 10 * np.exp(d) / sum
    print(d)
    d=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]



        # if batch_idx % log_interval == 0:
        #     # print('Train Epoch: {} [{}/{} ({:.0f}%)]\t Loss: {:.6f}'.format(
        #     #     epoch, batch_idx * len(images), len(train_dataloader.dataset),
        #     #     100. * batch_idx / len(train_dataloader), loss.item()))
        #     #


# -------------------------------------------------------------------------------
# 保存训练后的模型
torch.save(model.state_dict(), 'mobilenetv3_large_100.pth')
print("Model saved!")


